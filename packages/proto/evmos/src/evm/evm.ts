// Core EVM types generated from ethermint.evm.v1 proto definitions

// AccessType defines the types of permissions for the operations
export enum AccessType {
    ACCESS_TYPE_PERMISSIONLESS = 0,
    ACCESS_TYPE_RESTRICTED = 1,
    ACCESS_TYPE_PERMISSIONED = 2,
}

// AccessControlType defines the permission type for policies
export interface AccessControlType {
    accessType: AccessType;
    accessControlList: string[];
}

// AccessControl defines the permission policy of the EVM
// for creating and calling contracts
export interface AccessControl {
    create: AccessControlType;
    call: AccessControlType;
}

// ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int values
// instead of *big.Int.
export interface ChainConfig {
    homesteadBlock?: string;
    daoForkBlock?: string;
    daoForkSupport?: boolean;
    eip150Block?: string;
    eip150Hash?: string;
    eip155Block?: string;
    eip158Block?: string;
    byzantiumBlock?: string;
    constantinopleBlock?: string;
    petersburgBlock?: string;
    istanbulBlock?: string;
    muirGlacierBlock?: string;
    berlinBlock?: string;
    londonBlock?: string;
    arrowGlacierBlock?: string;
    grayGlacierBlock?: string;
    mergeNetsplitBlock?: string;
    shanghaiBlock?: string;
    cancunBlock?: string;
}

// Params defines the EVM module parameters
export interface Params {
    evmDenom: string;
    extraEips: string[];
    chainConfig: ChainConfig;
    allowUnprotectedTxs: boolean;
    evmChannels: string[];
    accessControl: AccessControl;
    activeStaticPrecompiles: string[];
}

// State represents a single Storage key value pair item.
export interface State {
    key: string;
    value: string;
}

// TransactionLogs define the logs generated from a transaction execution
// with a given hash. It it used for import/export data as transactions are not
// persisted on blockchain state after an upgrade.
export interface TransactionLogs {
    hash: string;
    logs: Log[];
}

// Log represents an protobuf compatible Ethereum Log that defines a contract
// log event. These events are generated by the LOG opcode and stored/indexed by
// the node.
export interface Log {
    address: string;
    topics: string[];
    data: Uint8Array;
    blockNumber: number;
    txHash: string;
    txIndex: number;
    blockHash: string;
    index: number;
    removed: boolean;
}

// TxResult stores results of Tx execution.
export interface TxResult {
    contractAddress: string;
    bloom: Uint8Array;
    txLogs: TransactionLogs;
    ret: Uint8Array;
    reverted: boolean;
    gasUsed: number;
}

// AccessTuple is the element type of an access list.
export interface AccessTuple {
    address: string;
    storageKeys: string[];
}

// TraceConfig holds extra parameters to trace functions.
export interface TraceConfig {
    tracer?: string;
    timeout?: string;
    reexec?: number;
    disableStack?: boolean;
    disableStorage?: boolean;
    debug?: boolean;
    limit?: number;
    overrides?: ChainConfig;
    enableMemory?: boolean;
    enableReturnData?: boolean;
    tracerJsonConfig?: string;
}
